{"version":3,"file":"index.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/utils/spider.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react';\r\nimport '../styles.css';\r\n//\r\n//let captionPoints = [];\r\n\r\n// helper functions\r\nconst polarToX = (angle, distance) => Math.cos(angle - Math.PI / 2) * distance;\r\n\r\nconst polarToY = (angle, distance) => Math.sin(angle - Math.PI / 2) * distance;\r\n\r\nconst points = points => {\r\n    return points\r\n        .map(point => point[0].toFixed(4) + ',' + point[1].toFixed(4))\r\n        .join(' ');\r\n};\r\n\r\n// const getPointsForCaption = (key, pointY) => {\r\n//     let tempPoints = {};\r\n//     if (captionPoints.length) {\r\n//         captionPoints.forEach(element => {\r\n//             if (element.key === key) {\r\n//                 let val = (element.size * 2);\r\n//                 val = (parseInt(val) + parseInt(element.pointY));\r\n//                 if (val >= pointY) {\r\n//                     tempPoints = {\r\n//                         pointX: element.pointX,\r\n//                         pointY: element.pointY - element.size * 1.5\r\n//                     };\r\n//                 }\r\n\r\n//             }\r\n//         });\r\n//     }\r\n//     return tempPoints;\r\n// }\r\n\r\n// const setPointsForCaptions = (key, pointX, pointY, size) => {\r\n//     captionPoints.push({ key: key, pointX: pointX, pointY: pointY, size });\r\n// }\r\n\r\n// Click Handlers\r\n\r\nconst onClick = (options, col) => {\r\n    options.onClick(col);\r\n}\r\nconst onShapeClick = (options) => {\r\n    options.onShapeClick(options);\r\n}\r\n\r\n\r\n// drawing the cross lines over the circle\r\nconst axis = options => (col, i) => (\r\n    <polyline\r\n        key={`poly-axis-${i}`}\r\n        points={points([\r\n            [0, 0],\r\n            [\r\n                polarToX(col.angle, options.size / options.drawSize),\r\n                polarToY(col.angle, options.size / options.drawSize)\r\n            ]\r\n        ])}\r\n        {...options.axisProps(col)}\r\n    />\r\n);\r\n\r\n// drawing the shapes inside the circles based on the data\r\nconst shape = (columns, options) => (chartData, i) => {\r\n    return (\r\n        <path key={`shape-${i}`}\r\n            d={options.smoothing(\r\n                columns.map(col => {\r\n                    let val = col.status;\r\n                    if (val > 1) {\r\n                        val = val / 100;\r\n                    }\r\n                    if ('number' !== typeof val) {\r\n                        throw new Error(`Data set ${i} is invalid.`);\r\n                    }\r\n\r\n                    return [\r\n                        polarToX(col.angle, (val * options.size) / options.drawSize),\r\n                        polarToY(col.angle, (val * options.size) / options.drawSize)\r\n                    ];\r\n                })\r\n            )}\r\n            onClick={() => onShapeClick(options)}\r\n            {...options.shapeProps()}\r\n\r\n        />\r\n    );\r\n};\r\n\r\n// drawing the circles\r\nconst scale = (options, value) => (\r\n    <circle\r\n        key={`circle-${value}`}\r\n        cx={0}\r\n        cy={0}\r\n        r={(value * options.size) / options.drawSize}\r\n        {...options.scaleProps(value)}\r\n    />\r\n);\r\n\r\n\r\n// adding caption index\r\nlet index = 1;\r\nconst captionIndex = options => col => (\r\n    <text\r\n        key={`caption-of-${col.key}`}\r\n        x={polarToX(col.angle, (options.size / 2) * 0.57).toFixed(4)}\r\n        y={polarToY(col.angle, (options.size / 2) * 0.57).toFixed(4)}\r\n        dy={(options.indexProps().fontSize || 10) / 2}\r\n        {...options.indexProps()}\r\n    >\r\n        {index++}\r\n    </text>\r\n);\r\n\r\n// adding the captions\r\nconst caption = options => col => {\r\n    let style = (col.status / 100 === 1) ? 'caption' : 'caption-completed';\r\n\r\n    let distance = (options.icons || options.circleFill) ? 0.95 : 0.75;\r\n\r\n    let pointX = polarToX(col.angle, (options.size / 2) * distance).toFixed(4);\r\n    let pointY = polarToY(col.angle, (options.size / 2) * distance).toFixed(4);\r\n\r\n    //let points = getPointsForCaption(col.key, pointY);\r\n\r\n    return (\r\n        <text\r\n            key={`caption-of-${col.key}`}\r\n            x={pointX}\r\n            y={pointY}\r\n            dy={(options.captionProps(col).fontSize || 10) / 2}\r\n            {...options.captionProps(style)}\r\n\r\n        >\r\n            {col.key}\r\n        </text>\r\n    );\r\n}\r\n\r\n// drawing the circle and filling it will color based on the status\r\nconst circleFill = options => col => {\r\n    let circleSize = options.size / 20;\r\n    let imageSize = circleSize - 2;\r\n    let style = (col.status / 100 === 1) ? 'fillCircle' : 'fillCircle-completed';\r\n    let pointX = polarToX(col.angle, (options.size / 2) * 0.75).toFixed(4);\r\n    let pointY = polarToY(col.angle, (options.size / 2) * 0.75).toFixed(4);\r\n    // setPointsForCaptions(col.key, pointX, pointY, circleSize);\r\n    let imagePoints = { x: pointX - imageSize / 2, y: pointY - imageSize / 2 };\r\n    return (\r\n        <g>\r\n            <circle\r\n                key={`circle-of-${col.key}`}\r\n                r={circleSize}\r\n                cx={pointX}\r\n                cy={pointY}\r\n                onClick={() => onClick(options, col)}\r\n                {...options.fillCircleProps(style)}\r\n            >\r\n\r\n            </circle>\r\n            <image width={imageSize} height={imageSize} key={`icon-of-${col.key}`}\r\n                x={imagePoints.x}\r\n                y={imagePoints.y}\r\n                xlinkHref={col.icon}\r\n                onClick={() => onClick(options, col)}\r\n                {...options.iconProps(col)}\r\n            />\r\n        </g>\r\n    );\r\n}\r\n\r\n//adding the icons\r\nconst icon = options => col => {\r\n    let pointX = polarToX(col.angle, (options.size / 2) * 0.75).toFixed(4);\r\n    let pointY = polarToY(col.angle, (options.size / 2) * 0.75).toFixed(4);\r\n    let imageSize = options.size / 10;\r\n    let imagePoints = { x: pointX - imageSize / 2, y: pointY - imageSize / 2 };\r\n\r\n    return (\r\n        <image width={imageSize} height={imageSize} key={`icon-of-${col.key}`}\r\n            x={imagePoints.x}\r\n            y={imagePoints.y}\r\n            xlinkHref={col.icon} onClick={() => onClick(options, col)}\r\n            {...options.iconProps(col)}\r\n        />\r\n    );\r\n}\r\n\r\n// rendering the Chart\r\nconst spider = (data, props = {}) => {\r\n\r\n    if (!Array.isArray(data)) {\r\n        throw new Error('data must be an array');\r\n    }\r\n    props.size = props.size / props.zoomDistance;\r\n\r\n    const columns = data.map((item, i, all) => {\r\n        return {\r\n            key: item.caption,\r\n            caption: caption[i],\r\n            angle: (Math.PI * 2 * i) / all.length,\r\n            icon: item.icon,\r\n            status: item.status\r\n        };\r\n    });\r\n    let groups = [\r\n        <g key={`g-groups`}>{columns.map(shape(columns, props))}</g>\r\n    ];\r\n    if (data) {\r\n        if (props.icons) {\r\n            groups.push(<g key={`poly-icons`}>{columns.map(icon(props))}</g>);\r\n        }\r\n        else if (props.circleFill) {\r\n            groups.push(<g key={`poly-circlefill`}>{columns.map(circleFill(props))}</g>);\r\n        }\r\n        if (props.captionIndex) {\r\n            index = 1;\r\n            groups.push(<g key={`poly-captionsindex`}>{columns.map(captionIndex(props))}</g>);\r\n        }\r\n        if (props.captions) {\r\n            groups.push(<g key={`poly-captions`}>{columns.map(caption(props))}</g>);\r\n        }\r\n\r\n    }\r\n    if (props.axes) {\r\n        groups.unshift(<g key={`group-axes`}>{columns.map(axis(props))}</g>);\r\n    }\r\n\r\n    if (props.scales > 0) {\r\n        const scales = [];\r\n        for (let i = props.scales; i > 0; i--) {\r\n            scales.push(scale(props, i / props.scales));\r\n        }\r\n        groups.unshift(<g key={`poly-scales`}>{scales}</g>);\r\n    }\r\n\r\n    const delta = (props.size / 2).toFixed(4);\r\n    return <g transform={`translate(${delta},${delta})`}>{groups}</g>;\r\n\r\n};\r\n\r\nexport default spider;\r\n","import React from 'react';\r\nimport spider from './utils/spider';\r\n\r\nimport './styles.css';\r\n\r\nconst noSmoothing = points => {\r\n    let d = 'M' + points[0][0].toFixed(4) + ',' + points[0][1].toFixed(4);\r\n    for (let i = 1; i < points.length; i++) {\r\n        d += 'L' + points[i][0].toFixed(4) + ',' + points[i][1].toFixed(4);\r\n    }\r\n    return d + 'z';\r\n};\r\n\r\nconst defaultProps = {\r\n    size: 400,\r\n    axes: true, // show axes?\r\n    scales: 5, // show scale circles?\r\n    captions: true, // show captions?\r\n    captionIndex : true, // show caption indexes\r\n    icons: true, // show icons\r\n    circleFill : true,\r\n    zoomDistance: 1, // where on the axes are the captions?\r\n    drawSize: 4,\r\n    smoothing: noSmoothing, // shape smoothing function\r\n    captionMargin: 10,\r\n    onClick: function iconOnClick(item) {\r\n        //alert(item.key);\r\n    },\r\n    onShapeClick: function onShapeClick(item) {\r\n        //alert(item.key);\r\n    },\r\n    axisProps: () => ({ className: 'axis' }),\r\n    circleProps: () => ({ className: ' circle' }),\r\n    indexProps: () => ({ className: 'index', fontSize: 14 }),\r\n    scaleProps: () => ({ className: 'scale', fill: 'none' }),\r\n    shapeProps: () => ({ className: 'shape' }),\r\n    iconProps: () => ({ className: 'icon' }),\r\n    fillCircleProps: () => ({ className: \"fillCircle\" }),\r\n    captionProps: () => ({\r\n        className: 'caption',\r\n        textAnchor: 'middle',\r\n        fontSize: 10,\r\n        fontFamily: 'Source Sans Pro'\r\n    }),\r\n};\r\n\r\n// Resizable Spider Chart Component\r\nconst SpiderChart = properties => {\r\n    const { data, props } = properties;\r\n    let { size } = props;\r\n    if (!size) {\r\n        size = defaultProps.size;\r\n    }\r\n    else if (typeof (size) === \"string\") {\r\n        size = parseInt(size);\r\n    }\r\n    const chartProps = { ...defaultProps, ...props, size };\r\n    const chart = spider(data, chartProps);\r\n    const captionMargin = chartProps.captionMargin;\r\n    return (\r\n        <svg\r\n            version=\"1\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width={size}\r\n            height={size}\r\n            viewBox={`-${captionMargin} 0 ${size + captionMargin * 2} ${size}`}\r\n            style={{\r\n                padding: \"20px\", width: \"100%\", height: \"100%\"\r\n            }}\r\n        >\r\n            {chart}\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default SpiderChart;\r\n"],"names":["polarToX","angle","distance","Math","cos","PI","polarToY","sin","points","map","point","toFixed","join","onClick","options","col","onShapeClick","axis","i","size","drawSize","axisProps","shape","columns","chartData","smoothing","val","status","Error","shapeProps","scale","value","scaleProps","index","captionIndex","key","indexProps","fontSize","caption","style","icons","circleFill","pointX","pointY","captionProps","circleSize","imageSize","imagePoints","x","y","fillCircleProps","icon","iconProps","spider","data","props","Array","isArray","zoomDistance","item","all","length","groups","push","captions","axes","unshift","scales","delta","noSmoothing","d","defaultProps","iconOnClick","className","fill","SpiderChart","properties","parseInt","chartProps","chart","captionMargin","width","height"],"mappings":"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"}